//
// Created by OrangeJuice on 2023/5/29.
//
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

// 定义FCB结构
struct FCB {
    std::string filename;
    std::string extension;
    std::string path;
    bool isDirectory;
    int size;
    time_t createdTime;
    time_t modifiedTime;
};

// 模拟磁盘驱动器类
class DiskDrive {
public:
    DiskDrive(const std::string& filename);
    bool createFile(const std::string& filePath, bool isDirectory);
    bool deleteFile(const std::string& filePath);
    std::vector<FCB> listFiles();
    // 其他操作方法

private:
    std::string filename;
    std::fstream diskFile;
    // 其他私有成员和方法
};

DiskDrive::DiskDrive(const std::string& filename) : filename(filename) {
    diskFile.open(filename, std::ios::in | std::ios::out | std::ios::binary);

    if (!diskFile) {
        // 如果文件不存在，则创建新文件
        diskFile.open(filename, std::ios::out | std::ios::binary);
        diskFile.close();
        diskFile.open(filename, std::ios::in | std::ios::out | std::ios::binary);
    }
}

bool DiskDrive::createFile(const std::string& filePath, bool isDirectory) {
    // 检查文件是否已存在
    diskFile.seekg(0, std::ios::beg);
    while (true) {
        FCB fcb;
        diskFile.read(reinterpret_cast<char*>(&fcb), sizeof(FCB));
        if (diskFile.eof()) {
            break;
        }
        if (fcb.path == filePath) {
            std::cout << "File or directory already exists." << std::endl;
            return false;
        }
    }

    // 创建新文件或目录
    FCB newFCB;
    // 设置新FCB的属性
    newFCB.isDirectory = isDirectory;
    newFCB.path = filePath;
    // ...

    // 写入磁盘文件
    diskFile.seekp(0, std::ios::end);
    diskFile.write(reinterpret_cast<const char*>(&newFCB), sizeof(FCB));

    return true;
}

bool DiskDrive::deleteFile(const std::string& filePath) {
    // 查找要删除的文件或目录
    std::vector<FCB> fcbList;
    diskFile.seekg(0, std::ios::beg);
    while (true) {
        FCB fcb;
        diskFile.read(reinterpret_cast<char*>(&fcb), sizeof(FCB));
        if (diskFile.eof()) {
            break;
        }
        if (fcb.path == filePath) {
            // 找到匹配的文件或目录，跳过删除
            continue;
        }
        fcbList.push_back(fcb);
    }

    // 重写磁盘文件
    diskFile.close();
    diskFile.open(filename, std::ios::out | std::ios::binary);
    for (const auto& fcb : fcbList) {
        diskFile.write(reinterpret_cast<const char*>(&fcb), sizeof(FCB));
    }

    return true;
}

std::vector<FCB> DiskDrive::listFiles() {
    std::vector<FCB> fcbList;
    diskFile.seekg(0, std::ios::beg);
    while (true) {
        FCB fcb;
        diskFile.read(reinterpret_cast<char*>(&fcb), sizeof(FCB));
        if (diskFile.eof()) {
            break;
        }
        fcbList.push_back(fcb);
    }
    return fcbList;
}

//int main() {
//    std::string diskFilename = "disk.txt";
//
//    DiskDrive diskDrive(diskFilename);
//
//    // 示例操作
//    diskDrive.createFile("path/to/file.txt", false);
//    diskDrive.createFile("path/to/directory", true);
//    diskDrive.createFile("path/to/another_file.txt", false);
//
//    std::vector<FCB> files = diskDrive.listFiles();
//    for (const auto& file : files) {
//        std::cout << "File: " << file.path << std::endl;
//    }
//
//    diskDrive.deleteFile("path/to/directory");
//
//    return 0;
//}
